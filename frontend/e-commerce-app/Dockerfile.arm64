# ARM64-optimized React Application Dockerfile
# Build stage
FROM --platform=linux/arm64 node:20-alpine AS builder

WORKDIR /app

# Install curl and build dependencies
RUN apk add --no-cache curl python3 make g++

# Copy package files
COPY package*.json ./

# Clean install with ARM64-friendly approach
RUN npm cache clean --force
RUN rm -rf node_modules package-lock.json || true

# Install dependencies with increased timeout and force flag
RUN npm install --force --verbose --timeout=300000

# Copy source code
COPY . .

# Build application with increased memory
ENV NODE_OPTIONS="--max-old-space-size=4096"
RUN npm run build

# Production stage
FROM --platform=linux/arm64 nginx:alpine

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built application
COPY --from=builder /app/dist /usr/share/nginx/html

# Copy nginx configuration
COPY nginx.conf /etc/nginx/conf.d/default.conf

# Create nginx user and set permissions
RUN chown -R nginx:nginx /usr/share/nginx/html

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/ || exit 1

# Start nginx
CMD ["nginx", "-g", "daemon off;"] 